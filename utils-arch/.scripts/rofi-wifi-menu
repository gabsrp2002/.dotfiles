#!/usr/bin/env bash

# File to store the cached network list
cache_file="/tmp/rofi_wifi_cache.txt"

# Function to get and format the Wi-Fi list for caching
get_full_wifi_list_for_cache() {
    notify-send "Wi-Fi" "Listing available networks..."
    # Get a list of available wifi connections and morph it into a nice-looking list
    nmcli --fields "SECURITY,SSID" device wifi list | sed 1d | sed 's/  */ /g' | sed -E "s/WPA*.?\S/ /g" | sed "s/^--/ /g" | sed "s/  //g" | sed "/--/d"
}

# Function to connect to a selected network
connect_to_wifi() {
    chosen_network="$1"
    # Get name of connection, removing icons and whitespace
    read -r chosen_id <<< "$(echo "$chosen_network" | sed 's/󰖩\s*//' | sed 's/󰖪\s*//' | sed 's/󰑖\s*//' | sed 's/\s*//' | sed 's/\s*//' | sed 's/\s*//' | sed 's/^ *//' | sed 's/ *$//')"

    # Message to show when connection is activated successfully
    success_message="You are now connected to the Wi-Fi network \"$chosen_id\"."

    # Get saved connections
    saved_connections=$(nmcli -g NAME connection)

    notify-send "Connecting to Wi-Fi network \"$chosen_id\"..."
    
    # Check if connection is already saved
    if [[ $(echo "$saved_connections" | grep -w "$chosen_id") = "$chosen_id" ]]; then
        if nmcli connection up id "$chosen_id" &> /dev/null; then
            notify-send "Connection Established" "$success_message"
        else
            notify-send "Connection Failed" "Could not connect to the saved network \"$chosen_id\"."
        fi
    else
        # Handle new connection
        if [[ "$chosen_network" =~ "" ]]; then
            wifi_password=$(rofi -dmenu -p "Password: " )
            if [ -n "$wifi_password" ]; then
                if nmcli device wifi connect "$chosen_id" password "$wifi_password" &> /dev/null; then
                    notify-send "Connection Established" "$success_message"
                else
                    notify-send "Connection Failed" "Incorrect password or connection failed."
                fi
            else
                notify-send "Connection Canceled" "Password was not provided."
            fi
        else
            # Unsecured network
            if nmcli device wifi connect "$chosen_id" &> /dev/null; then
                notify-send "Connection Established" "$success_message"
            else
                notify-send "Connection Failed" "Could not connect to the unsecured network \"$chosen_id\"."
            fi
        fi
    fi
}

# Check the current Wi-Fi radio state
connected_status=$(nmcli -fields WIFI g)

# Handle the case where Wi-Fi is disabled
if [[ "$connected_status" =~ "disabled" ]]; then
    chosen_network=$(echo -e "󰖩 Enable Wi-Fi" | rofi -dmenu -i -p "Wi-Fi SSID: ")
    if [ "$chosen_network" = "󰖩 Enable Wi-Fi" ]; then
        if nmcli radio wifi on &> /dev/null; then
            notify-send "Wi-Fi Enabled" "Wi-Fi radio has been turned on."
        else
            notify-send "Error" "Failed to enable Wi-Fi radio."
        fi
    fi
    exit 0
fi

# If Wi-Fi is enabled, proceed with the normal logic
# Check if a cached file exists. If not, create it for the first run.
if [ ! -f "$cache_file" ]; then
    get_full_wifi_list_for_cache > "$cache_file"
fi

# Get the connected network in real-time
connected_ssid=$(nmcli dev status | grep "wifi" | grep -w "connected" | awk '{print $4}')

# Get the full line of the connected network from a new nmcli scan
if [ -n "$connected_ssid" ]; then
    connected_network="  $connected_ssid"
fi

# Get the list of available networks from the cache file
wifi_list_cached=$(cat "$cache_file")

# Remove the connected network from the cached list to avoid duplicates
if [ -n "$connected_ssid" ]; then
    wifi_list_cached=$(echo "$wifi_list_cached" | grep -v "$connected_ssid")
fi

# Construct the final list for Rofi
final_list="󰑖  Refresh List\n󰖪  Disable Wi-Fi"
if [ -n "$connected_network" ]; then
    final_list="$final_list\n$connected_network"
fi
final_list="$final_list\n$wifi_list_cached"

# Use rofi to select a wifi network
chosen_network=$(echo -e "$final_list" | uniq -u | rofi -dmenu -i -p "Wi-Fi SSID: ")

# Handle the selected option
if [ "$chosen_network" = "" ]; then
    exit
elif [[ "$chosen_network" = "󰑖  Refresh List" ]]; then
    notify-send "Wi-Fi" "Refreshing network list..."
    get_full_wifi_list_for_cache > "$cache_file"
    exec "$0"
elif [[ "$chosen_network" =~ "󰖩" ]]; then
    # This block is now mostly for a redundant check, as the "disabled" state is handled earlier
    if nmcli radio wifi on &> /dev/null; then
        notify-send "Wi-Fi Enabled" "Wi-Fi radio has been turned on."
    else
        notify-send "Error" "Failed to enable Wi-Fi radio."
    fi
elif [[ "$chosen_network" =~ "󰖪" ]]; then
    if nmcli radio wifi off &> /dev/null; then
        notify-send "Wi-Fi Disabled" "Wi-Fi radio has been turned off."
    else
        notify-send "Error" "Failed to disable Wi-Fi radio."
    fi
# New logic to handle disconnecting
elif [[ -n "$connected_ssid" && "$chosen_network" =~ "$connected_ssid" ]]; then
    notify-send "Wi-Fi" "Disconnecting from network \"$connected_ssid\"..."
    if nmcli dev disconnect wlan0 &> /dev/null; then
        notify-send "Wi-Fi Disconnected" "You have been disconnected from \"$connected_ssid\"."
    else
        notify-send "Error" "Failed to disconnect from \"$connected_ssid\"."
    fi
else
    connect_to_wifi "$chosen_network"
fi
